#!/bin/bash

#
# Displays the available commands.
#
commandInfo() {
echo "NAME

	  Pilothouse: A lightweight command-line app for managing a Docker-based local dev environment

SYNOPSIS

	  pilothouse [command] [arguments]

COMMANDS

	  up                    Boots up the Docker containers, and adds all necessary site entries to the host's hosts
							file.
	  down                  Halts the Docker containers, removing all site entries from the host's hosts file.
	  restart [container]   Restarts the specified Docker container (\`nginx\`, \`memcached\`, etc.), or the entire system
							if no container is specified.
	  create [site]         Creates a new local site.
	  delete [site]         Deletes an existing local site.
	  generate-ssl [site]   Generates, installs, and trusts a self-signed SSL certificate for the specified site.
	  mysql [command]       Runs the provided MySQL command. The command will be run on the database of the current
							site, or with no database selected if not run from within a site directory.
	  compose [command]     Runs a \`docker-compose\` command with required environment variables set.

	  Where [site] appears above, it refers to the name of the site directory, not the URL that the site is accessed by.
"
}

#
# Runs a docker-compose command with required environment variables set.
#
# @param 1: The command string.
composeCommand() {

	COMPOSE_FILES="-f docker-compose.yml"
	if [ -e docker-compose.custom.yml ]; then
		COMPOSE_FILES="$COMPOSE_FILES -f docker-compose.custom.yml"
	fi

	docker-compose ${COMPOSE_FILES} "$@"
}

#
# Generates an SSL certificate and configures Nginx for SSL support.
#
# @param 1: The name of the site to which to add SSL support.
#
generateSSL() {

	if [ ! -z "$1" ]; then
		CURRENT_SITE_NAME="$1"
	elif [ -z "$CURRENT_SITE_NAME" ]; then
		read -p "Enter the name of the site directory in which to enable SSL support: " CURRENT_SITE_NAME
		if [ -z "$CURRENT_SITE_NAME" ]; then
			echo 'Directory name cannot be empty.'
			exit 1
		fi
	fi

	# Check that the directory is valid.
	NGINX_CONFIG_FILE="./config/nginx/sites/$CURRENT_SITE_NAME.conf"
	SITE_DIR="$SITES_DIR/$CURRENT_SITE_NAME"
	if [ ! -e ${NGINX_CONFIG_FILE} ] || [ ! -e ${SITE_DIR} ]; then
		echo 'Invalid site name.'
		exit 1
	fi

	# Get the domain name from the Nginx config.
	DOMAIN_NAME=$(getDomainFromNginxConfig ${NGINX_CONFIG_FILE})
	if [ -z ${DOMAIN_NAME} ]; then
		echo 'Could not determine domain name.'
		exit 1;
	fi

	# Generate the certificate and key.
	openssl req \
		-newkey rsa:2048 \
		-x509 \
		-nodes \
		-keyout "${SITES_DIR}/${CURRENT_SITE_NAME}/$CURRENT_SITE_NAME.key" \
		-new \
		-out "${SITES_DIR}/${CURRENT_SITE_NAME}/$CURRENT_SITE_NAME.cert" \
		-subj /CN="$DOMAIN_NAME" \
		-reqexts SAN \
		-extensions SAN \
		-config <(cat /etc/ssl/openssl.cnf <(printf "[SAN]\nsubjectAltName=DNS:$DOMAIN_NAME")) \
		-sha256 \
		-days 3650

	# Trust the certificate and key.
	sudo security add-trusted-cert -d -r trustRoot -k "/Library/Keychains/System.keychain" "${SITES_DIR}/${CURRENT_SITE_NAME}/$CURRENT_SITE_NAME.cert"

	# Add the certificate and key to the Nginx config.
	NGINX_SSL_CONFIG="\\"$'\n'"\\"$'\t'"listen 443 ssl;""\\"$'\n'"\\"$'\t'"ssl on;""\\"$'\n'"\\"$'\t'"ssl_certificate /var/www/html/${CURRENT_SITE_NAME}/${CURRENT_SITE_NAME}.cert;""\\"$'\n'"\\"$'\t'"ssl_certificate_key /var/www/html/${CURRENT_SITE_NAME}/${CURRENT_SITE_NAME}.key;""\\"$'\n'
	sed -i '' -e "s|server {|&${NGINX_SSL_CONFIG}|g" ${NGINX_CONFIG_FILE}

	# Restart Nginx.
	composeCommand restart nginx
}

#
# Gets the current path relative to the site directory.
#
# @echo The relative path, or blank if not in a site.
#
getCurrentPathInSite() {
	if [ -z "$CURRENT_SITE_DIRECTORY" ]; then
		return
	fi

	CURRENT_SITE_DIRECTORY_ESCAPED=$(echo ${CURRENT_SITE_DIRECTORY} | sed 's#/#\\/#g')

	HTDOCS_PATH=$(echo $PWD | sed "s/${CURRENT_SITE_DIRECTORY_ESCAPED}//")
	if [ -z "$HTDOCS_PATH" ]; then
		HTDOCS_PATH='/'
	fi

	echo $HTDOCS_PATH
}

#
# Gets the path of the current site's root directory.
#
# @echo The site path if found, blank otherwise.
#
getCurrentSiteDirectory() {
	CURRENTDIRECTORY="$PWD"

	while [[ "$CURRENTDIRECTORY" != "" && ! -e "$CURRENTDIRECTORY/htdocs" ]]; do
		CURRENTDIRECTORY=${CURRENTDIRECTORY%/*}
	done

	echo $CURRENTDIRECTORY
}

#
# Gets the name of the current site.
#
# @echo The site directory name if found, blank otherwise.
#
getCurrentSiteName() {
	if [ -z "$CURRENT_SITE_DIRECTORY" ]; then
		return
	fi

	echo $(basename ${CURRENT_SITE_DIRECTORY})
}

#
# Gets a site's domain name from the Nginx config.
#
# @param 1: The name of the site's directory.
#
# @echo The domain name if found, blank otherwise.
#
getDomainFromNginxConfig() {
	CONFIGFILE=$1
	if [ -z "$CONFIGFILE" ]; then
		return
	fi

	if [ ! -e ${CONFIGFILE} ]; then
		return
	fi

	DOMAINNAME=$(sed -n 's|.*server_name \(.*\);|\1|p' ${CONFIGFILE})

	echo ${DOMAINNAME}
}

#
# Adds all entries to the hosts file.
#
hostsAddAll() {
	ALL_HOSTS=$(hostsGetAll)

	for host in ${ALL_HOSTS}; do
		hostsAddEntry "$host"
	done

	echo 'Updating hosts files in containers...'
	NGINX_CONTAINER_IP=$(docker inspect --format '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(composeCommand ps -q nginx))

	composeCommand exec php56        /bin/sh -c "echo '${NGINX_CONTAINER_IP} ${ALL_HOSTS}' >> /etc/hosts"
	composeCommand exec php56-xdebug /bin/sh -c "echo '${NGINX_CONTAINER_IP} ${ALL_HOSTS}' >> /etc/hosts"
	composeCommand exec php70        /bin/sh -c "echo '${NGINX_CONTAINER_IP} ${ALL_HOSTS}' >> /etc/hosts"
	composeCommand exec php70-xdebug /bin/sh -c "echo '${NGINX_CONTAINER_IP} ${ALL_HOSTS}' >> /etc/hosts"
	composeCommand exec php71        /bin/sh -c "echo '${NGINX_CONTAINER_IP} ${ALL_HOSTS}' >> /etc/hosts"
	composeCommand exec php71-xdebug /bin/sh -c "echo '${NGINX_CONTAINER_IP} ${ALL_HOSTS}' >> /etc/hosts"
}

#
# Adds a new entry to the hosts file, if it does not already exist.
#
# @param 1: The domain name to add.
#
hostsAddEntry() {
	DOMAIN=$1
	if [ -z "$DOMAIN" ]; then
		return
	fi

	INVALIDCHARS=$(echo ${DOMAIN} | grep -o "[^ 0-9a-zA-Z.-]")
	if [ ! -z "$INVALIDCHARS" ]; then
		echo "Could not add hosts entry for ${DOMAIN}: invalid characters in domain."
		return
	fi

	NEWENTRY="127.0.0.1 ${DOMAIN} #pilothouse"
	if [ -z "$(grep "${NEWENTRY}" /etc/hosts)" ]; then
		echo "Adding hosts file entry for ${DOMAIN}."
		# Add a newline to the end of /etc/hosts if it doesn't already exist.
		sudo sed -i '' '$a\' /etc/hosts
		sudo sh -c "echo '${NEWENTRY}' >> /etc/hosts"
	else
		echo "Hosts file entry for ${DOMAIN} exists; skipping."
	fi
}

#
# Gets all entries from the hosts file.
#
# @echo The hosts file entries.
#
hostsGetAll() {
	ALL_HOSTS=''
	CONFIGS=config/nginx/sites/*.conf

	for CURRENTCONFIG in ${CONFIGS}; do
		CURRENTDOMAIN=$(getDomainFromNginxConfig ${CURRENTCONFIG})
		if [ '_' != "$CURRENTDOMAIN" ]; then
			ALL_HOSTS="$ALL_HOSTS $CURRENTDOMAIN"
		fi
	done

	echo "$ALL_HOSTS"
}

#
# Removes all entries from the hosts file.
#
hostsRemoveAll() {
	ALL_HOSTS=$(hostsGetAll)

	for host in ${ALL_HOSTS}; do
		hostsRemoveEntry "$host"
	done
}

#
# Removes an entry from the hosts file.
#
# @param 1: The domain name to remove.
#
hostsRemoveEntry() {
	DOMAIN=$1
	if [ -z "$DOMAIN" ]; then
		return
	fi

	INVALIDCHARS=$(echo ${DOMAIN} | grep -o "[^ 0-9a-zA-Z.-]")
	if [ ! -z "$INVALIDCHARS" ]; then
		echo "Could not remove hosts entry for ${DOMAIN}: invalid characters in domain."
		return
	fi

	# Escape periods to avoid screwing up sed.
	DOMAIN_ESCAPED=$(echo ${DOMAIN} | sed 's/\./\\./g')

	ENTRYTOREMOVE=$(echo -e "127.0.0.1 ${DOMAIN_ESCAPED} #pilothouse")

	if [ ! -z "$(grep "$ENTRYTOREMOVE" /etc/hosts)" ]; then
		echo "Removing hosts file entry for ${DOMAIN}."
		sudo sed -i '' -n "/$ENTRYTOREMOVE/!p" /etc/hosts
	else
		echo "Hosts file entry for ${DOMAIN} does not exist; skipping."
	fi
}

#
# Runs a MySQL command in the mysql container.
#
# Runs the provided MySQL command. The command will be run on the database of the current site, or with no database
# selected if not run from within a site directory.
#
# @param 1: The command to run.
#
mysqlCommand() {

	COMMAND="$1"
	if [ -z "$COMMAND" ]; then
		echo 'Please provide a command to run.'
		exit 1
	fi

	if [ ! -z "$CURRENT_SITE_NAME" ]; then
		COMMAND="USE '$CURRENT_SITE_NAME'; $COMMAND"
	fi

	composeCommand exec "$DEFAULT_PHP_CONTAINER" mysql --host=mysql -u root -proot -e "$COMMAND"
}

#
# Creates a new site.
#
# Will prompt the user for the site to create.
#
# @param 1: The name of the site to create.
#
siteCreate() {

	DIRECTORYNAME="$1"
	if [ -z "$DIRECTORYNAME" ]; then
		read -p "Enter the name of the new site directory: " DIRECTORYNAME
		if [ -z "$DIRECTORYNAME" ]; then
			echo 'Site name cannot be empty.'
			exit 1
		fi
	fi

	read -p "Domain to use (leave blank for $DIRECTORYNAME.dev): " DOMAINNAME
	if [ -z "$DOMAINNAME" ]; then
		DOMAINNAME="$DIRECTORYNAME.dev"
	fi

	read -p "URL to proxy images from (leave blank to disable): " PROXYURL

	echo "Creating site $DOMAINNAME."

	systemUpIfDown

	# Create directory.
	if [ ! -e ${SITES_DIR}/${DIRECTORYNAME}/htdocs ]; then
		mkdir -p ${SITES_DIR}/${DIRECTORYNAME}/htdocs
	fi

	# Create database.
	mysqlCommand "CREATE DATABASE IF NOT EXISTS \`${DIRECTORYNAME}\`;"

	# Set site variables.
	CURRENT_SITE_NAME=$DIRECTORYNAME
	CURRENT_SITE_DIRECTORY=${SITES_DIR}/${DIRECTORYNAME}
	CURRENT_PATH_IN_SITE="/htdocs"

	# Install WordPress.
	wpCommand core download
	wpCommand core config --dbhost=mysql --dbname=${DIRECTORYNAME} --dbuser=wordpress --dbpass=wordpress
	wpCommand core install --url=${DOMAINNAME} --title=${DIRECTORYNAME} --admin_user=${WP_DEFAULT_USERNAME} --admin_password=${WP_DEFAULT_PASSWORD} --admin_email=${WP_DEFAULT_USERNAME}@${DOMAINNAME} --skip-email

	# Add object cache dropin.
	curl -sS https://plugins.svn.wordpress.org/memcached/trunk/object-cache.php -o ${SITES_DIR}/${DIRECTORYNAME}/htdocs/wp-content/object-cache.php

	# Add additional PHP to wp-config.php.
	WPCONFIG_CUSTOM_PHP_FILE='config/wordpress/wp-config.php.inc'
	if [ -e config/wordpress/wp-config.custom.php.inc ]; then
		WPCONFIG_CUSTOM_PHP_FILE='config/wordpress/wp-config.custom.php.inc'
	fi
	ADDITIONAL_PHP=$(cat ${WPCONFIG_CUSTOM_PHP_FILE} | sed "s|define( 'WP_CACHE_KEY_SALT', '|&${DIRECTORYNAME}|" | awk 1 ORS="\\\\\n")
	ADDITIONAL_PHP="$ADDITIONAL_PHP"$'\n'"\\"$'\n'"\\"$'\n'
	sed -i '' -e "s|\/\* That's all|${ADDITIONAL_PHP}&|g" ${SITES_DIR}/${DIRECTORYNAME}/htdocs/wp-config.php

	# Create nginx config.
	NGINX_PROXY_CONFIG=''
	if [ ! -z "$PROXYURL" ]; then
			NGINX_PROXY_PROTOCOL="$(echo $PROXYURL | grep :// | sed -e's,^\(.*://\).*,\1,g')"

			if [ -z "$NGINX_PROXY_PROTOCOL" ]; then
				PROXYURL_PARSED="http://$PROXYURL"
			else
				PROXYURL_PARSED=$PROXYURL
			fi

		NGINX_PROXY_CONFIG="\n\n\t# Proxy uploads from production\n\tlocation ~* uploads\/.*\.(gif|jpe?g|png)$ {\n\t\ttry_files \$uri \$uri/ @production;\n\t}\n\tlocation @production {\n\t\tresolver 8.8.8.8;\n\t\tproxy_pass $PROXYURL_PARSED\$uri;\n\t}"
	fi

	NGINX_CONFIG="server {\n\tserver_name $DOMAINNAME;\n\troot /var/www/html/$DIRECTORYNAME/htdocs;$NGINX_PROXY_CONFIG\n\n\tinclude /etc/nginx/partials/shared.conf.inc;\n}"
	echo -e ${NGINX_CONFIG} > config/nginx/sites/${DIRECTORYNAME}.conf
	composeCommand restart nginx

	# Add hosts entry.
	hostsAddEntry ${DOMAINNAME}

	echo "$DOMAINNAME successfully created."
}

#
# Deletes an existing site.
#
# Will prompt the user for the site to delete.
#
# @param 1: The name of the site to delete.
#
siteDelete() {

	DIRECTORYNAME="$1"
	if [ -z "$DIRECTORYNAME" ]; then
		read -p "Enter the name of the directory to delete: " DIRECTORYNAME
		if [ -z "$DIRECTORYNAME" ]; then
			echo 'Directory name cannot be empty.'
			exit 1
		fi
	fi

	DOMAINNAME=$(getDomainFromNginxConfig "config/nginx/sites/${DIRECTORYNAME}.conf")
	if [ -z ${DOMAINNAME} ]; then
		echo 'Could not determine domain name. Moving on...'
		DOMAINNAME=${DIRECTORYNAME}
	fi

	echo "Deleting site $DOMAINNAME."

	systemUpIfDown

	# Delete directory.
	if [ -e ${SITES_DIR}/${DIRECTORYNAME} ]; then
		rm -rf ${SITES_DIR}/${DIRECTORYNAME}
	fi

	# Delete database.
	mysqlCommand "DROP DATABASE IF EXISTS \`${DIRECTORYNAME}\`;"

	# Delete Nginx config.
	if [ -e config/nginx/sites/${DIRECTORYNAME}.conf ]; then
		rm config/nginx/sites/${DIRECTORYNAME}.conf
		composeCommand restart nginx
	fi

	# Remove hosts entry.
	hostsRemoveEntry ${DOMAINNAME}

	echo "Site $DOMAINNAME successfully deleted."
}

#
# Shuts the system down.
#
systemDown() {
	sudo ifconfig lo0 -alias 100.0.0.0
	composeCommand stop
}

#
# Restarts the system.
#
# @param 1: The name of the container to restart.
#
systemRestart() {
	if [ ! -z "$1" ]; then
		composeCommand restart "$1"
	else
		systemDown
		systemUp
	fi
}

#
# Brings the system up.
#
systemUp() {
	# This is an ugly hack to create a loopback interface to allow Xdebug to connect back to the host machine.
	sudo ifconfig lo0 alias 100.0.0.0

	composeCommand up -d

	waitForMySQL
	mysqlCommand "CREATE USER IF NOT EXISTS 'wordpress'@'%' IDENTIFIED BY 'wordpress'; GRANT ALL PRIVILEGES ON *.* to 'wordpress'@'%'; FLUSH PRIVILEGES;"
}

#
# Brings the system up if it is not already running.
#
systemUpIfDown() {
	if [ 'Running' != "$(composeCommand exec "$DEFAULT_PHP_CONTAINER" "echo 'Running'")" ]; then
		systemUp
	fi
}

#
# Checks whether the mysql container is accepting connections, and if not, waits until it is.
#
waitForMySQL() {
	ITERATION=0
	while : ; do
		((ITERATION++))
		(composeCommand exec "$DEFAULT_PHP_CONTAINER" mysqladmin ping --no-beep --host=mysql --user=root --password=root) > /dev/null

		if [ $? -eq 0 ]; then
			break
		fi

		if [ ${ITERATION} -eq 2 ]; then
			echo -n "Waiting for MySQL to become ready... "
		fi

		sleep 1
	done

	if [ ${ITERATION} -ge 3 ]; then
		echo "done."
	fi
}

#
# Runs a WP-CLI command in the php container.
#
# @params: Aguments to be passed to WP-CLI
#
wpCommand() {
	ARGS=("$@")

	if [ -z "$CURRENT_SITE_NAME" ] && [ '--info' != "$ARGS" ]; then
		echo 'This command must be run from within a site directory.'
		exit 1
	fi

	CONTAINER="$DEFAULT_PHP_CONTAINER"
	XDEBUG_SUFFIX=''
	WPCLI_ARGS=''

	for arg in "${ARGS[@]}"; do
		case "$arg" in
			--php=*)
				CONTAINER="php${arg#*=}"
				;;
			--xdebug)
				XDEBUG_SUFFIX='-xdebug'
				;;
			*)
				WPCLI_ARGS="$WPCLI_ARGS '$arg'"
		esac
	done

	CONTAINER=$(echo "$CONTAINER" | sed "s/\.//")"$XDEBUG_SUFFIX"
	COMMAND="cd /var/www/html/${CURRENT_SITE_NAME}${CURRENT_PATH_IN_SITE} && wp --path=/var/www/html/${CURRENT_SITE_NAME}/htdocs${WPCLI_ARGS}"

	composeCommand exec --user=www-data "$CONTAINER" /bin/sh -c "$COMMAND"
}

# Set current site info.
CURRENT_SITE_DIRECTORY=$(getCurrentSiteDirectory)
CURRENT_SITE_NAME=$(getCurrentSiteName)
CURRENT_PATH_IN_SITE=$(getCurrentPathInSite)
cd $(dirname $(dirname $0))

# Set default environment variables.
export SITES_DIR="./sites"
export WP_DEFAULT_USERNAME="admin"
export WP_DEFAULT_PASSWORD="password"

# Override the defaults with user-configurable settings.
if [ -e pilothouse.ini ]; then
	source pilothouse.ini
fi

# Expand home directory in $SITES_DIR
SITES_DIR=$(eval echo ${SITES_DIR})

# Define config file locations.

export MYSQL_CONFIG_FILE='./config/mysql/mysql.conf'
if [ -e ./config/mysql/mysql.custom.conf ]; then
	MYSQL_CONFIG_FILE='./config/mysql/mysql.custom.conf'
fi

export NGINX_CONFIG_FILE='./config/nginx/nginx.conf'
if [ -e ./config/nginx/nginx.custom.conf ]; then
	NGINX_CONFIG_FILE='./config/nginx/nginx.custom.conf'
fi

export NGINX_SHARED_CONFIG_FILE='./config/nginx/partials/shared.conf.inc'
if [ -e ./config/nginx/partials/shared.custom.conf.inc ]; then
	NGINX_SHARED_CONFIG_FILE='./config/nginx/partials/shared.custom.conf.inc'
fi

export PHP_CONFIG_FILE='./config/php-fpm/php.ini'
if [ -e ./config/php-fpm/php.custom.ini ]; then
	PHP_CONFIG_FILE='./config/php-fpm/php.custom.ini'
fi

export PHP_FPM_CONFIG_FILE='./config/php-fpm/php-fpm.conf'
if [ -e ./config/php-fpm/php-fpm.custom.conf ]; then
	PHP_FPM_CONFIG_FILE='./config/php-fpm/php-fpm.custom.conf'
fi

export PHP_XDEBUG_CONFIG_FILE='./config/php-fpm/xdebug.ini'
if [ -e ./config/php-fpm/xdebug.custom.ini ]; then
	PHP_XDEBUG_CONFIG_FILE='./config/php-fpm/xdebug.custom.ini'
fi

export SSMTP_CONFIG_FILE=./config/ssmtp/ssmtp.conf
if [ -e ./config/ssmtp/ssmtp.custom.conf ]; then
	SSMTP_CONFIG_FILE=./config/ssmtp/ssmtp.custom.conf
fi

export WPCLI_CONFIG_FILE='./config/wp-cli/wp-cli.yml'
if [ -e ./config/wp-cli/wp-cli.custom.yml ]; then
	WPCLI_CONFIG_FILE='./config/wp-cli/wp-cli.custom.yml'
fi

# Define other variables.
DEFAULT_PHP_CONTAINER='php70'

# Run the command.
case $1 in
	create)
		siteCreate "$2"
		;;
	delete)
		siteDelete "$2"
		;;
	up)
		systemUp
		hostsAddAll
		;;
	down)
		systemDown
		hostsRemoveAll
		;;
	restart)
		systemRestart "$2"
		;;
	generate-ssl)
		generateSSL "$2"
		;;
	mysql)
		mysqlCommand "$2"
		;;
	wp-cli)
		shift
		wpCommand "$@"
		;;
	compose)
		shift
		composeCommand "$@"
		;;
	logs)
		composeCommand logs -f --tail=10 $2
		;;
	*)
		commandInfo
		;;
esac
